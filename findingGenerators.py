def generators(a, b):
    temp = 1
    for i in range(1, b-2):
        temp = (temp * a) % b
        if temp == 1:
            return False
    temp = (temp * a) % b
    return True

n = int(input("Enter a positive integer number: "))
k = 0

for g in range(2, n):
    if generators(g, n):
        k = k + 1
        print(f"{g} is a generator of", n)
print(f"{k} generators")

""" from math import gcd

# –§—É–Ω–∫—Ü—ñ—è –ï–π–ª–µ—Ä–∞ (–∫—ñ–ª—å–∫—ñ—Å—Ç—å —á–∏—Å–µ–ª –º–µ–Ω—à–∏—Ö –∑–∞ n —ñ –≤–∑–∞—î–º–Ω–æ –ø—Ä–æ—Å—Ç–∏—Ö –∑ n)
def euler_phi(n):
    result = 0
    for i in range(1, n + 1):
        if gcd(i, n) == 1:
            result += 1
    return result

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ñ–≤ –ø—Ä–æ—Å—Ç–æ–≥–æ —á–∏—Å–ª–∞ p
def count_generators(p):
    if not is_prime(p):
        return 0  # –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∏ —à—É–∫–∞—é—Ç—å –ª–∏—à–µ –¥–ª—è –ø—Ä–æ—Å—Ç–∏—Ö
    return euler_phi(p - 1)

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—Å—Ç–æ—Ç—É (–ø—Ä–æ—Å—Ç–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç)
def is_prime(n):
    if n < 2: return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

# üîç –ü—Ä–∏–∫–ª–∞–¥
p = 475417
print(f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ñ–≤ –¥–ª—è {p}: {count_generators(p)}")
 """